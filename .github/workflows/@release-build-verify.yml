name: Build and Verify

on:
  workflow_call:
    inputs:
      ref:
        description: 'Git reference to checkout'
        required: true
        type: string
    outputs:
      build_success:
        description: 'Whether the build was successful'
        value: ${{ jobs.build.outputs.success }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.verify_build.outputs.success }}
    steps:
      - name: 👷 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: 🧰 Setup PNPM package manager
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 🛠️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm' # Enable caching for faster builds

      - name: ⚙️ Install Dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build packages
        run: pnpm build

      # Verify the integrity of built packages
      - name: 🔍 Verify build
        id: verify_build
        shell: bash
        run: |
          echo "::group::Verifying package integrity"

          # Dynamically find all package directories
          EXPECTED_PACKAGES=()
          while IFS= read -r pkg_dir; do
            if [[ -d "$pkg_dir/dist" ]]; then
              EXPECTED_PACKAGES+=("$pkg_dir/dist")
            fi
          done < <(find packages -type d -maxdepth 2 -not -path "*/node_modules/*" -not -path "*/test/*")

          echo "Found packages to verify: ${EXPECTED_PACKAGES[*]}"

          for pkg in "${EXPECTED_PACKAGES[@]}"; do
            if [ ! -d "$pkg" ]; then
              echo "::error::Package directory not found: $pkg"
              exit 1
            fi

            # Check for expected files in each package
            if [ ! "$(find "$pkg" -name "*.js" | wc -l)" -gt 0 ]; then
              echo "::error::No JavaScript files found in $pkg"
              exit 1
            fi

            if [ ! "$(find "$pkg" -name "*.d.ts" | wc -l)" -gt 0 ]; then
              echo "::error::No TypeScript declaration files found in $pkg"
              exit 1
            fi
          done

          # Dynamically find all package.json files
          PACKAGE_JSONS=()
          while IFS= read -r pkg_json; do
            if [[ "$pkg_json" != *"node_modules"* ]]; then
              PACKAGE_JSONS+=("$pkg_json")
            fi
          done < <(find packages -name "package.json" -depth 2)

          echo "Found package.json files to verify: ${PACKAGE_JSONS[*]}"

          for pkg_json in "${PACKAGE_JSONS[@]}"; do
            # Check that package.json has required fields
            for field in "name" "version" "main" "types"; do
              if ! jq -e ".$field" "$pkg_json" > /dev/null; then
                echo "::error::Missing required field '$field' in $pkg_json"
                exit 1
              fi
            done
          done

          # Verify that no unexpected files are included
          for pkg in "${EXPECTED_PACKAGES[@]}"; do
            if find "$pkg" -name "*.spec.js" -o -name "*.spec.ts" -o -name "*.test.js" -o -name "*.test.ts" | grep -q .; then
              echo "::error::Test files found in distribution package: $pkg"
              find "$pkg" -name "*.spec.js" -o -name "*.spec.ts" -o -name "*.test.js" -o -name "*.test.ts"
              exit 1
            fi
          done

          echo "✅ All packages verified successfully"
          echo "::endgroup::"

          echo "success=true" >> $GITHUB_OUTPUT
