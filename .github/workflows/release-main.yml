name: Publish & Release

on:
  workflow_call:
    # Make this a reusable workflow, no value needed
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows
    inputs:
      branch:
        description: 'Branch to release from (lts = current maintenance branch)'
        required: true
        type: string
      releaseVersion:
        description: 'Release type'
        required: true
        type: string
      dryRun:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
    secrets:
      github-token:
        description: 'A token of the GitHub'
        required: true
      npm-token:
        description: 'A token of the NPM'
        required: true
      deploy-key:
        description: 'A deploy key'
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.github-token }}
  NPM_TOKEN: ${{ secrets.npm-token }}

jobs:
  check:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check releaseVersion of LTS
        env:
          IS_MAJOR: ${{ contains(inputs.releaseVersion, 'major') }}
          IS_LTS: ${{ contains(inputs.branch, 'lts') }}
        run: |
          if [ "${IS_MAJOR}" == 'true' -a "${IS_LTS}" == 'true' ]; then
            echo "ERROR: The LTS version is not allow to release the new major version"
            exit 1
          fi

  calculate:
    runs-on: 'ubuntu-latest'
    outputs:
      target-branch: ${{ steps.define.outputs.target-branch }}
      next-lts-branch: ${{ steps.define.outputs.next-lts-branch }}
    needs: ['check']
    steps:
      - name: 👷 Checkout
        uses: actions/checkout@v4
        with:
          # Always checkout main first to calculate the target branch
          ref: 'main'

      - name: 🧮 Calculate the version
        id: calculate
        shell: bash
        run: |
          PKG_JSON='packages/wdio-electron-service/package.json'
          CURRENT_MAJOR_VERSION="$(cat ${PKG_JSON} |jq -r '.version' |grep -o -E "([0-9]+){1})?" |head -n1)"
          echo "current-major-version=${CURRENT_MAJOR_VERSION}"
          echo "current-major-version=${CURRENT_MAJOR_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "lts-major-version=$((CURRENT_MAJOR_VERSION - 1))"
          echo "lts-major-version=$((CURRENT_MAJOR_VERSION - 1))" >>"${GITHUB_OUTPUT}"

      - name: ✏️ Define the name of target branch
        id: define
        env:
          TARGET_VERSION: ${{ inputs.branch }}
          MAINTENANCE_VERSION: ${{ steps.calculate.outputs.lts-major-version }}
          CURRENT_VERSION: ${{ steps.calculate.outputs.current-major-version }}
        shell: bash
        run: |
          if [ "${TARGET_VERSION}" == "main" ]; then
            echo "target-branch=main"
            echo "target-branch=main" >>"${GITHUB_OUTPUT}"
          else 
            echo "target-branch=v${MAINTENANCE_VERSION}"
            echo "target-branch=v${MAINTENANCE_VERSION}" >>"${GITHUB_OUTPUT}"
          fi
          echo "next-lts-branch=v${CURRENT_VERSION}"
          echo "next-lts-branch=v${CURRENT_VERSION}" >>"${GITHUB_OUTPUT}"

  release:
    runs-on: ubuntu-latest
    needs: ['calculate']
    steps:
      - name: 👷 Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy-key }}
          ref: ${{ needs.calculate.outputs.target-branch }}
          fetch-depth: 0

      - name: 🧰 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: ⚙️ Install Dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - name: Package Manager Setup
        if: ${{ github.repository == 'webdriverio-community/wdio-electron-service' }}
        run: |
          pnpm set registry "https://registry.npmjs.org/"
          pnpm set //registry.npmjs.org/:_authToken $NPM_TOKEN
          pnpm whoami

      - name: Git Setup
        run: |
          git config --global user.email "bot@webdriver.io"
          git config --global user.name "WebdriverIO Release Bot"

      - name: Build
        run: pnpm build

      - name: Replace dependabot config
        if: ${{ contains(inputs.releaseVersion, 'major') }}
        uses: mikefarah/yq@v4
        with:
          cmd: >-
            yq e '(.. | select(has("target-branch")) 
                      | select(.["target-branch"] 
                      | test("^v[0-9]+$"))).target-branch = "${{ needs.calculate.outputs.next-lts-branch }}"' -i '.github/dependabot.yml'

      - name: Commit dependabot config
        if: ${{ contains(inputs.releaseVersion, 'major') }}
        shell: bash
        env:
          NEW_LTS_BRANCH: ${{ needs.calculate.outputs.next-lts-branch }}
          CONFIG_DEPENDABOT: '.github/dependabot.yml'
        run: |
          if git diff --exit-code --quiet "${CONFIG_DEPENDABOT}"; then
            echo "No changes detected."
            exit 0
          fi
          echo "Update branch name for LTS(New value: ${NEW_LTS_BRANCH})."
          git add "${CONFIG_DEPENDABOT}"
          git commit -F-<<EOF
          chore: update the dependabot.yml

          Update branch name for LTS(New value: ${NEW_LTS_BRANCH}).
          [skip ci]
          EOF

      - name: Create Release and Tags
        run: pnpm turbo-version -b ${{ inputs.releaseVersion }}

      - name: Publish to NPM
        if: ${{ github.repository == 'webdriverio-community/wdio-electron-service' }}
        shell: bash
        env:
          RELEASE_BRANCH: ${{ needs.calculate.outputs.target-branch }}
        run: |
          test "${RELEASE_BRANCH}" == "main" && TAG="latest" || TAG="lts"
          pnpx tsx scripts/publish.ts --tag ${TAG} ${{ inputs.dryRun && '--dry-run' || '' }}

      - name: Log git changes
        if: ${{ inputs.dryRun }}
        env:
          RELEASE_BRANCH: ${{ needs.calculate.outputs.target-branch }}
        run: |
          git diff "origin/${RELEASE_BRANCH}"
          echo "DRY RUN: No changes were made."

      - name: Push Tags and Commits
        id: push-tags
        shell: bash
        if: ${{ !inputs.dryRun }}
        run: |
          echo "Git log:"
          git log --oneline -n 5
          # get release tag
          RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Release tag: $RELEASE_TAG"
          echo "Pushing tags and commits..."
          # push tags and commits without running the pre-push hook
          git push --tags --no-verify && git push --no-verify
          # pass the release tag to the next step
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ github.repository == 'webdriverio-community/wdio-electron-service' }}
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          prerelease: ${{ contains(inputs.releaseVersion, 'pre') }}
          repository: webdriverio-community/wdio-electron-service
          tag_name: ${{ steps.push-tags.outputs.RELEASE_TAG }}
          token: $GITHUB_TOKEN
