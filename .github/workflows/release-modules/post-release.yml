name: Post-Release Tasks

on:
  workflow_call:
    inputs:
      release_tag:
        description: 'The created release tag'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature, maintenance)'
        required: true
        type: string
    secrets:
      github_token:
        description: 'GitHub token for authentication'
        required: true

jobs:
  post-release:
    runs-on: ubuntu-latest
    steps:
      # Create appropriate milestones based on the release type
      - name: üè∑Ô∏è Create GitHub Milestones
        # Skip during dry runs and prereleases
        if: ${{ !inputs.dry_run && !contains(inputs.release_version, 'pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          RELEASE_TYPE: ${{ inputs.release_version }}
        run: |
          echo "::group::Creating GitHub milestones"
          pnpx tsx scripts/create-milestones.ts
          echo "::endgroup::"

      # Prepare for updating labels from release:future to release:next
      - name: üîÑ Prepare Release Label Updates
        # Skip during dry runs and prereleases
        if: ${{ !inputs.dry_run && !contains(inputs.release_version, 'pre') }}
        env:
          # Use the branch_type input to determine which track to update
          TRACK: ${{ inputs.branch_type }}
        run: |
          echo "::group::Preparing release label updates"
          echo "After the release is complete, you should manually run the label update script:"
          echo ""
          echo "  GITHUB_TOKEN=<your-token> TRACK=$TRACK pnpx tsx scripts/update-release-labels.ts"
          echo ""
          echo "To create a GitHub token:"
          echo "1. Go to https://github.com/settings/tokens"
          echo "2. Click 'Generate new token' > 'Generate new token (classic)'"
          echo "3. Give it a name like 'Label Update Script'"
          echo "4. Select the 'repo' scope (to manage repository labels)"
          echo "5. Click 'Generate token' and copy the token"
          echo ""
          echo "This will help you review and update issues/PRs from 'release:future' to 'release:next'"
          echo "::endgroup::"

      - name: üìù Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true # Create as draft for manual review
          generate_release_notes: true
          prerelease: ${{ contains(inputs.release_version, 'pre') }}
          repository: webdriverio-community/wdio-electron-service
          tag_name: ${{ inputs.release_tag }}
          token: ${{ secrets.github_token }}
